name: Release! Build & Package, Target Prod Install, NPM Publish (Tag)

on: 
  push: 
    tags: 
      # triggered only by major/minor/patch tags and those specifically tagged alpha. 
      # standard prerelease tags do not trigger.
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha.*'

  # TODO: implement dry-run ?
  # workflow_dispatch:

jobs:
  load-build-group:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout ${{ github.ref }}
      uses: actions/checkout@v2

      # *** comments for: build-group.json
      # build with the lowest versions of the OSes supported so the glibc/musl versions # are the oldest/most compatible. 
      # note: some of those images are no longer supported officially (https://hub.docker.com/_/node)
    - name: Load build group data
      id: set-matrix
      run: .github/scripts/matrix-from-json.sh .github/config/build-group.json

  build-group-publish:
    runs-on: ubuntu-latest 
    needs: load-build-group
    strategy:
      matrix: ${{fromJson(needs.load-build-group.outputs.matrix)}}

    env:
      AO_TOKEN_PROD: ${{ secrets.AO_TOKEN_PROD }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      # *** IMPORTANT: 
      # send production key pair to enable container to access S3 buckets
      - name: Create Container ${{ matrix.image }}
        id: create
        run: |
         .github/scripts/container-from-matrix-input.sh \
          ${{ matrix.image }} \
          ${{ secrets.PROD_AWS_ACCESS_KEY_ID }} \
          ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}

      # must install specific dependency for liboboe.js before a build
      - name: NPM Install linux-os-info
        run: docker exec ${{ steps.create.outputs.containerId }} npm install --save linux-os-info

      # runs: node setup-liboboe.js && node-pre-gyp install --build-from-source
      - name: NPM Install with Rebuild fron source
        run: docker exec ${{ steps.create.outputs.containerId }} npm run rebuild

      # node-pre-gyp direct rebuild
      - name: Build
        run: docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp rebuild

      # artifacts are at:build/stage/nodejs/bindings/
      - name: Package
        run: docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp package # requires clean rebuild

      # *** IMPORTANT: 
      # always include --s3_host flag regardless of node-pre-gyp defaults.
      # workflows designed to ensure that the  staging bucket already has similarly versioned package
      - name: Publish Package to Production
        run: docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp publish --s3_host=production

      - name: Stop container
        if: always()
        run: docker stop ${{ steps.create.outputs.containerId }}

  load-target-group:
    runs-on: ubuntu-latest
    needs: build-group-publish
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout ${{ github.ref }}
      uses: actions/checkout@v2

      # *** comments for: target-group.json
    - name: Load target group data
      id: set-matrix
      run: .github/scripts/matrix-from-json.sh .github/config/target-group.json

  target-group-install:
    runs-on: ubuntu-latest 
    needs: load-target-group
    strategy:
      matrix: ${{fromJson(needs.load-target-group.outputs.matrix)}}

    env:
      AO_TOKEN_PROD: ${{ secrets.AO_TOKEN_PROD }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Create Container ${{ matrix.image }}
        id: create
        run: .github/scripts/container-from-matrix-input.sh ${{ matrix.image }}

      - name: NPM Install Production
        run: docker exec ${{ steps.create.outputs.containerId }} npm install --unsafe-perm --s3_host=production

      # - name: Run tests
      #   run: docker exec ${{ steps.create.outputs.containerId }} npm test TODO: make decision on this

      - name: Stop container
        if: always()
        run: docker stop ${{ steps.create.outputs.containerId }}

  npm-publish:
    runs-on: ubuntu-latest 
    if: ${{ startsWith(github.ref, 'refs/tags/') }} # will not run when manually triggered
    needs: target-group-install

    env:
      AO_TOKEN_PROD: ${{ secrets.AO_TOKEN_PROD }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Create Container ${{ matrix.image }}
        id: create
        run: .github/scripts/container-from-matrix-input.sh node

      # the file is created in the container. it should be cleared when the container is "garbage collected" by GitHub
      - name: Set NPM Token
        run: |
          docker exec ${{ steps.create.outputs.containerId }} bash -c "echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}' >> .npmrc"
          docker exec ${{ steps.create.outputs.containerId }} bash -c "echo 'registry=https://registry.npmjs.org/' >> .npmrc"
          docker exec ${{ steps.create.outputs.containerId }} bash -c "echo 'always-auth=true '>> .npmrc"

      # *** IMPORTANT: 
      # by default our package is tagged with 'latest' to set other pass --tag. 
      # the only pre-relese --preid triggering this workflow is alpha
      # package is scoped to organization (@appoptics/apm-binding) set --access public to avoid 402 Payment Required
      - name: NPM Publish (alpha)
        run: docker exec ${{ steps.create.outputs.containerId }} npm publish --tag alpha --access public
        if: ${{ contains(github.ref, '-') }}

      - name: NPM Publish (latest)
        run: docker exec ${{ steps.create.outputs.containerId }} npm publish --access public
        if: ${{ !contains(github.ref, '-') }}

      - name: Stop container
        if: always()
        run: docker stop ${{ steps.create.outputs.containerId }}
