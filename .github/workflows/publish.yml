name: publish using node-pre-gyp for pre-built glibc and musl versions

# https://github.community/t/trigger-workflow-only-on-pull-request-merge/17359
on:
  # manual trigger only
  workflow_dispatch:
    inputs:
      tag-to-publish:
        description: 'branch/tag: this will be used to publish apm-bindings'
        required: true
      production:
        description: 'production flag: will publish to staging unless this is set to true'
        default: false
        required: true

jobs:
  target-image-builder:
    strategy:
      matrix:
        os-version: [         # build with the lowest versions of node and OSes supported
          'node:10-alpine3.9', 'node:12-alpine3.9', 'node:14-alpine3.10',
          'centos:7+node:10', 'centos:7+node:12', 'centos:7+node:14'
        ]
    runs-on: ubuntu-latest    # this doesn't build the bindings; it loads the container that builds the bindings.

    # (os-version) is appended, so "test" appears "test (node:10-alpine3.9)"
    name: publish
    steps:
    # To use a repo-specific action you must check out the repository
    - name: Checkout to root dir
      uses: actions/checkout@v2
    # jump through a little hoop to get the branch by itself
    - name: get branch
      run: echo "gh_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
    - name: dump context
      env:
        GITHUB_CONTEXT: ${{toJson(github)}}
      run: echo $GITHUB_CONTEXT
    - name: Create specific alpine/node image
      id: generic
      uses: ./.github/actions/generic
      with:
        script-to-run: publish.sh
        # specify the branch/tag that to be published
        branch: ${{github.event.inputs.tag-to-publish}}
        # repurposed for publishing. (for testing it is a token to enable connecting
        # to the production collector; for publishing it provides access to a potentially
        # private repo.)
        # TODO - the secret should become an organizational secret so it works for any account
        # this one is tied to bmacnaughton (even though i use github.actor). not sure there is
        # any other way to handle it unless ${{secrets.REPO_READ_${{github.actor}}}} syntax would
        # work. i haven't tried it.
        ao-token-prod: "https://${{github.actor}}:${{secrets.PRIVATE_REPO_READ}}@github.com/${{github.repository}}.git"
        # node and os combined specification
        node-image: ${{matrix.os-version}}
        # for bucket being published to
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        production: ${{github.event.inputs.production}}

    # Use the output from the `generic` step
    - name: show info, context, and debugging information
      run: |
        echo "all args (generic) ${{steps.generic.outputs.all-args-generic}}"
        echo "all args (publish.sh) ${{steps.generic.outputs.all-args-in-script}}"
        echo "os ${{steps.generic.outputs.os-details}}"
        echo "branch ${{steps.generic.outputs.branch}}"
    - name: publishing results
      run: |
        echo "actor: ${{github.actor}}"
        echo "published name: ${{steps.generic.outputs.publish-name}}"
        echo "published path: ${{steps.generic.outputs.publish-destination}}"
