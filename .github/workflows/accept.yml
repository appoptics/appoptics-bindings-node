name: Fallback Install, Build & Package & Prebuilt Install (Merge)

on: 
  push: 
    branches: 
      # triggered by pull request approval triggers which is a merge to default branch
      - master

  workflow_dispatch:
    inputs: 
      target-test:
        required: false
        description: 'Run Tests on Target Group? (type: yes)'
        default: false

jobs:
  # entry point 1: fallback group
  load-fallback-group:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout ${{ github.ref }}
      uses: actions/checkout@v2

      # *** comments for: fallback-group.json
      # contains images that are able to build "out of the box"
    - name: Load target group data
      id: set-matrix
      run: .github/scripts/matrix-from-json.sh .github/config/fallback-group.json

  fallback-group-install:
    runs-on: ubuntu-latest
    needs: load-fallback-group
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.load-fallback-group.outputs.matrix)}}

    env:
      AO_TOKEN_PROD: ${{ secrets.AO_TOKEN_PROD }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Create Container ${{ matrix.image }}
        id: create
        run: .github/scripts/container-from-matrix-input.sh ${{ matrix.image }}

      # the current version package has yet to be built.
      # it will fallback to build from source
      - name: NPM Install (to fallback)
        run: docker exec ${{ steps.create.outputs.containerId }} npm install --unsafe-perm

      # explicitly look for artifacts that where created during install
      - name: Confirm Install Artifacts
        run: |
          docker exec ${{ steps.create.outputs.containerId }} ls ./dist/napi-v7/ao_metrics.node 
          docker exec ${{ steps.create.outputs.containerId }} ls ./dist/napi-v7/apm_bindings.node

      - name: Run tests
        run: docker exec ${{ steps.create.outputs.containerId }} npm test
        if: ${{ github.event.inputs.target-test }}

      - name: Stop & Remove container
        if: always()
        run: |
          docker stop ${{ steps.create.outputs.containerId }}
          docker rm --force ${{ steps.create.outputs.containerId }}

  # entry point 2: build group, prebuilt group
  load-build-group:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout ${{ github.ref }}
      uses: actions/checkout@v2

      # *** comments for: build-group.json
      # build with the lowest versions of the OSes supported so the glibc/musl versions are the oldest/most compatible. 
      # note: some of those images are no longer supported officially (https://hub.docker.com/_/node)
    - name: Load build group data
      id: set-matrix
      run: .github/scripts/matrix-from-json.sh .github/config/build-group.json

  build-group-publish:
    runs-on: ubuntu-latest 
    needs: load-build-group
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.load-build-group.outputs.matrix)}}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      # *** IMPORTANT: 
      # send staging key pair to enable container to access S3 buckets
      - name: Create Container ${{ matrix.image }}
        id: create
        run: |
         .github/scripts/container-from-matrix-input.sh \
          ${{ matrix.image }} \
          ${{ secrets.AWS_ACCESS_KEY_ID }} \
          ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # must install specific dependencies before a build
      # can't call npm install. doing so may fallback-to-build if package has yet to be published (double build)
      # use npm workaround specifying a package name to bypass install script in package.json
      - name: NPM Install dependencies
        run: docker exec ${{ steps.create.outputs.containerId }} npm install linux-os-info --unsafe-perm

      # must setup libobo before build
      # node-pre-gyp rebuild runs "clean" and "build" at once.
      # it is mapped to `node-gyp rebuild` which internally means "clean + configure + build" and triggers a full recompile
      - name: Build
        run: |
          docker exec ${{ steps.create.outputs.containerId }} node setup-liboboe.js
          docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp rebuild

      # artifacts are at:build/stage/nodejs/bindings/
      - name: Package
        run: docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp package # requires clean rebuild

      # *** IMPORTANT: 
      # always include --s3_host flag regardless of node-pre-gyp defaults.
      # node-pre-gyp can't publish over existing version, thus always attempt unpublished of current in staging bucket
      - name: Clear Staging for version
        run: docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp unpublish --s3_host=staging

      - name: Publish Package to Staging
        run: docker exec ${{ steps.create.outputs.containerId }} npx node-pre-gyp publish --s3_host=staging

      - name: Stop & Remove container
        if: always()
        run: |
          docker stop ${{ steps.create.outputs.containerId }}
          docker rm --force ${{ steps.create.outputs.containerId }}

  load-prebuilt-group:
    runs-on: ubuntu-latest
    needs: build-group-publish
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout ${{ github.ref }}
      uses: actions/checkout@v2

      # *** comments for: prebuilt-group.json
      # contains images that are unable to build "out of the box" and will install prebuilt
    - name: Load target group data
      id: set-matrix
      run: .github/scripts/matrix-from-json.sh .github/config/prebuilt-group.json

  prebuilt-group-install:
    runs-on: ubuntu-latest 
    needs: load-prebuilt-group
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.load-prebuilt-group.outputs.matrix)}}

    env:
      AO_TOKEN_PROD: ${{ secrets.AO_TOKEN_PROD }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Create Container ${{ matrix.image }}
        id: create
        run: .github/scripts/container-from-matrix-input.sh ${{ matrix.image }}

      # *** IMPORTANT: by default our package is installed from production bucket as defined in package.json. 
      # to test current build pass --s3_host="staging"
      - name: NPM Install Staging
        run: docker exec ${{ steps.create.outputs.containerId }} npm install --unsafe-perm --s3_host=staging

      # explicitly look for artifacts that where created during install
      - name: Confirm Install Artifacts
        run: |
          docker exec ${{ steps.create.outputs.containerId }} ls ./dist/napi-v7/ao_metrics.node 
          docker exec ${{ steps.create.outputs.containerId }} ls ./dist/napi-v7/apm_bindings.node

      - name: Run tests
        run: docker exec ${{ steps.create.outputs.containerId }} npm test
        if: ${{ github.event.inputs.target-test }}

      - name: Stop & Remove container
        if: always()
        run: |
          docker stop ${{ steps.create.outputs.containerId }}
          docker rm --force ${{ steps.create.outputs.containerId }}
