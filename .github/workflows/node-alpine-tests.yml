name: alpine-node-version matrix

# https://github.community/t/trigger-workflow-only-on-pull-request-merge/17359
on:
  # manual trigger. n.b. - to trigger a workflow it must be on the default branch
  # and that is impossible to test in a branch. for bindings i have set up a private
  # repo, apm-node-bindings-actions-test. i develop on a branch in appoptics-bindings-node
  # but push like "git push actions-test HEAD:master". actions-test is defined in
  # .git/config to be a remote pointing to apm-node-bindings-actions-test.
  workflow_dispatch:
  # most pushes to master are the result of a pull request, so this is effectively
  # "on pull_request merge to master"
  push:
    branches:
      - master

jobs:
  test-combinations:
    strategy:
      matrix:
        os-version: [
        'node:10-alpine3.9', 'node:10-alpine3.10', 'node:10-alpine3.11',
        'node:12-alpine3.9', 'node:12-alpine3.10', 'node:12-alpine3.11', 'node:12-alpine3.12',
        'node:14-alpine3.10', 'node:14-alpine3.11', 'node:14-alpine3.12',
        'node:15-alpine3.12',
        ]
    runs-on: ubuntu-latest
    # (os-version) is appended, so "test" appears "test (node:10-alpine3.9)"
    name: test
    steps:
    # To use a repo-specific action you must check out the repository
    - name: Checkout to root dir
      uses: actions/checkout@v2
    # jump through a little hoop to get the branch by itself
    - name: get branch
      run: echo "gh_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
    #
    # pass the "with" parameters to action.yml's inputs which
    # become entrypoint.sh's positional arguments. those are
    # used to build the os-specific docker containers in image-actions.
    #
    - name: Create specific os/node image
      id: generic
      uses: ./.github/actions/generic
      with:
        script-to-run: node-os-tests.sh
        # specify testing the branch that this was invoked for
        branch-to-test: ${{env.gh_branch}}
        ao-token-prod: ${{secrets.AO_TOKEN_PROD}}
        node-image: ${{matrix.os-version}}
    # Use the output from the `generic` step
    - name: show info, context, and debugging information
      run: |
        echo "all args 1 ${{steps.generic.outputs.all-args}}"
        echo "all args 2 ${{steps.generic.outputs.all-args-2}}"
        echo "os ${{steps.generic.outputs.os-details}}"
        echo "branch ${{steps.generic.outputs.branch-to-test}}"
    - name: test results
      run: |
        echo "npm install --production --unsafe-perm: ${{steps.generic.outputs.install-prod}}"
        echo "npm install --unsafe-perm: ${{steps.generic.outputs.install-dev}}"
        echo "tests passed: ${{steps.generic.outputs.tests-passed-count}}"
        echo "tests failed: ${{steps.generic.outputs.tests-failed-count}} - ${{steps.generic.outputs.tests-failed}}"
